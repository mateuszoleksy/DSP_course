using LinearAlgebra

function interpolate(m, s, kernel::Function=sinc)
    return x -> begin
        suma = 0.0
        delta = m[2] - m[1]
        for i in eachindex(m)
            suma += s[i] * kernel((x - m[i])/delta)
        end
        return suma
    end

end

energy(x) = sum(abs2, x)
power(x) = energy(x)/length(x)
kronecker(t) = ifelse(t==0, 1, 0)

firwin_bs(order, F1, F2) = [kronecker(Int(n)) - (2F2 *sin(2F2*n) - 2F1*sinc(2F1*n)) for n in -order/2:order/2]

blackman(M::Integer)::AbstractVector{<:Real} = [0.42 + 0.5cos(2π * n / (2M + 1)) + 0.08cos(4π * n / (2M + 1)) for n = -M:M]

sawtooth_wave(t) = -2*rem(t, 1.0, RoundNearest)

function lti_amp(b::Vector, a::Vector, f)::Real
    M = length(b)
    K = length(a)
    num = sum(b[m+1] * cispi(-2 * f * m) for m in 0:M-1)
    denom = sum(a[k+1] * cispi(-2 * f * k) for k in 0:K-1)
    H_f = num / denom
    return abs(H_f)
end

function conv(f,g)
    M = length(f)
    K = length(g)
    suma = zeros(eltype(f), M+K-1)
    for m in 1:M
        for k in 1:K
            suma[m+k-1] += f[m] * g[k]
        end
    end
    return suma
end

function poly_from_roots(r)
    p = [1.0 + 0im]
    for i in eachindex(r)
        p = conv(p, [1, -r[i]])
    end
    return p
end

mean(x) = sum(x)/length(x)



begin
    function rozwiazanie(;
        m::Vector{Float64} = [-4.2, -4.1999, -4.1998, -4.1997, -4.1996, -4.1995, -4.1994, -4.1993, -4.1992, -4.1991, -4.199, -4.1989, -4.1988, -4.1987, -4.1986, -4.1985, -4.1984, -4.1983, -4.1982, -4.1981, -4.198, -4.1979, -4.1978, -4.1977, -4.1976, -4.1975, -4.1974, -4.1973, -4.1972, -4.1971, -4.197, -4.1969, -4.1968, -4.1967, -4.1966, -4.1965, -4.1964, -4.1963, -4.1962, -4.1961, -4.196, -4.1959, -4.1958, -4.1957, -4.1956, -4.1955, -4.1954, -4.1953, -4.1952, -4.1951, -4.195, -4.1949, -4.1948, -4.1947, -4.1946, -4.1945, -4.1944, -4.1943, -4.1942, -4.1941, -4.194, -4.1939, -4.1938, -4.1937, -4.1936, -4.1935, -4.1934, -4.1933, -4.1932, -4.1931, -4.193, -4.1929, -4.1928, -4.1927, -4.1926, -4.1925, -4.1924, -4.1923, -4.1922, -4.1921, -4.192, -4.1919, -4.1918, -4.1917, -4.1916, -4.1915, -4.1914, -4.1913, -4.1912, -4.1911],
        s::Vector{Float64} = [0.8505, 0.7691, 0.7425, 0.632, 0.7469, 0.9254, 0.2594, 0.594, 0.355, 0.5326, 0.0575, 0.8398, 0.8312, 0.8932, 0.1356, 0.0788, 0.9587, 0.8634, 0.1967, 0.912, 0.3145, 0.7533, 0.4357, 0.6982, 0.269, 0.9211, 0.1945, 0.4986, 0.1836, 0.4026, 0.5435, 0.2242, 0.0845, 0.4979, 0.8657, 0.3907, 0.6115, 0.1108, 0.9877, 0.5809, 0.5386, 0.1936, 0.0445, 0.7684, 0.7074, 0.8844, 0.0492, 0.0914, 0.9906, 0.6811, 0.3085, 0.3525, 0.6239, 0.9903, 0.1823, 0.2991, 0.3381, 0.6914, 0.8065, 0.464, 0.8294, 0.016, 0.757, 0.4366, 0.5488, 0.0061, 0.5009, 0.0541, 0.7908, 0.5102, 0.4022, 0.0744, 0.989, 0.6513, 0.8232, 0.6357, 0.9374, 0.1523, 0.6951, 0.8404, 0.0944, 0.5147, 0.2579, 0.4812, 0.8927, 0.1997, 0.5456, 0.5233, 0.3411, 0.2705],
        t::Vector{Float64} = [-4.19659, -4.19275, -4.19935, -4.19332, -4.1986, -4.19456, -4.19656, -4.19553],
    )
        y = interpolate(m,s)
        return sum(y.(t))
    end

    out1 = rozwiazanie()
end

begin
    function rozwiazanie(;
        zz::Vector{ComplexF64} = ComplexF64[0.5937082894040855 + 0.80468035088032im, 0.5937082894040855 - 0.80468035088032im, 0.5937082894040855 + 0.80468035088032im, 0.5937082894040855 - 0.80468035088032im, 0.5937082894040855 + 0.80468035088032im, 0.5937082894040855 - 0.80468035088032im, 0.5937082894040855 + 0.80468035088032im, 0.5937082894040855 - 0.80468035088032im, 0.5937082894040855 + 0.80468035088032im, 0.5937082894040855 - 0.80468035088032im, 0.5937082894040855 + 0.80468035088032im, 0.5937082894040855 - 0.80468035088032im],
        pp::Vector{ComplexF64} = ComplexF64[0.4543519754580741 - 0.8467991833882023im, 0.6710947535981581 + 0.6975788107003273im, 0.4543519754580741 + 0.8467991833882023im, 0.6710947535981581 - 0.6975788107003273im, 0.4573094334180168 - 0.7730080408671095im, 0.6125915483457687 + 0.6751821043955187im, 0.4573094334180168 + 0.7730080408671095im, 0.6125915483457687 - 0.6751821043955187im, 0.4932310371033537 - 0.7137758757744921im, 0.549584133919043 + 0.6800057851779617im, 0.4932310371033537 + 0.7137758757744921im, 0.549584133919043 - 0.6800057851779617im],
        k::Float64 = 0.5777931270964741,
        F::Vector{Float64} = [0.05, 0.15, 0.41, 0.5],
    )
        a = poly_from_roots(pp)
        b = poly_from_roots(zz) .* k
        wynik = [lti_amp(b, a, f) for f in F]
        return mean(wynik)
    end

    out2 = rozwiazanie()
end

function lti_filter(b::Vector, a::Vector, x::Vector)::Vector
    N = length(x)
    M = length(b) - 1
    K = length(a) - 1
    y = zeros(Float64, N)

    for n in 1:N
        for k in 0:M
            if n - k > 0
                y[n] += b[k+1] * x[n-k]
            end
        end
        for k in 1:K
            if n - k > 0
                y[n] -= a[k+1] * y[n-k]
            end
        end
    end
    return y
end

begin
    function rozwiazanie(;
        fp::Float64 = 255.11,
        t1::Float64 = 9.58,
        N::Int = 751,
    )
        x = range(;start= t1, step=1/fp, length=N)
        y = 3.2*sawtooth_wave.(0.9.*x .- 1.6)
        return power(y)
    end

    out3 = rozwiazanie()

end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.00024902235403586297, 0.0009960894161434519, 0.001494134124215178, 0.0009960894161434519, 0.00024902235403586297],
        a::Vector{Float64} = [1.0, -3.5503949320063146, 4.882886378988292, -3.07413881049567, 0.7466633726273009],
        x::Vector{Float64} = [-0.1, -0.64, -0.82, -0.04, -0.4, -0.73, 0.36, -0.96, -0.75, 0.44, -0.97, -0.54, 0.78, 0.65, 0.19, 0.31, -0.96, 0.15, 0.59, -0.98, -0.9, 0.18, 0.75, -0.46, 0.95, 0.06, 0.37, 0.85, -0.51, -0.5, 0.08],
        L::Int = 42,
    )
    N = length(x)
    x_padded = vcat(x, zeros(Float64, L-N))
    y = lti_filter(b,a,x_padded)
    return mean(y)
    end

    out4 = rozwiazanie()
end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.5288529878944446, -2.5205040695792467, 8.125339072158553, -17.73477852848207, 30.69975231995196, -41.50071483737963, 46.31904664743819, -41.50071483737963, 30.69975231995196, -17.734778528482067, 8.125339072158553, -2.520504069579247, 0.5288529878944448],
        a::Vector{Float64} = [1.0, -4.417560792945078, 13.184289405309087, -26.75906451347236, 43.181786951968476, -54.64666487157282, 57.29905102536049, -48.463077288925156, 33.99546964070354, -18.735149285474492, 8.235013438101651, -2.470872251954055, 0.5039756817410161],
        x::Vector{Float64} = [0.34, -0.25, 0.4, -0.74, 0.49, 0.03, 0.67, -0.51, 0.41, 0.9, -0.59, 0.96, 0.52, -0.62, -0.19, -0.24, -0.12, -0.35, 0.28, -0.93, 0.73, -0.09, 0.45, -0.2, 0.88, -0.51, 0.32, 0.86, -0.1, 0.39, -0.67],
        L::Int = 80,
    )
    N = length(x)
    x_padded = vcat(x, zeros(Float64, L-N))
    y = lti_filter(b,a,x_padded)
    return mean(y)
    end

    out5 = rozwiazanie()
end

begin
    function rozwiazanie(;
        order::Int = 100,
        fp::Float64 = 103.0,
        f1::Float64 = 22.14,
        f2::Float64 = 39.66,
        z::Vector{Int} = [15, 65, 74],
    )
        h = firwin_bs(order, f1/fp, f2/fp)
        h = h .* blackman(Int(order/2))
        h_z = [h[i] for i in z]
        return sum(h_z)
    end

    out6 = rozwiazanie()
end