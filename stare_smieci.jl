using LinearAlgebra

mean(x) = sum(x)/length(x)
energy(x) = sum(abs2, x)
power(x) = energy(x)/length(x)
rms(x) = sqrt(power(x))

function conv(f,g)
    M = length(f)
    K = length(g)
    sum = zeros(eltype(f), M+K-1)
    for m in 1:M
        for k in 1:K
            sum[m+k-1] += f[m] * g[k]
        end
    end
    return sum
end

function lti_amp(b,a,f)
    M = length(b)-1
    K = length(a)-1
    num = sum(b[m+1] * cispi(-2*f*m) for m in 0:M)
    denom = sum(a[k+1] * cispi(-2*f*k) for k in 0:K)
    hf = num/denom
    return abs(hf)
end

function interpolate(m,s,kernel::Function=sinc)
    return x->begin
        sum = 0.0
        delta = m[2] - m[1]
        for i in eachindex(m)
            sum += s[i] * kernel((x - m[i])/delta)
        end
        return sum
    end
end

function poly_from_roots(r)
    p = [1.0+0im]
    for i in eachindex(r)
        p = conv(p, [1, -r[i]])
    end
    return p
end

quantize(L) =  x -> L[argmin(abs.(-L .+ x))]

begin
    function rozwiazanie(;
        x::Vector{Float64} = [-4.14, 1.46, 4.05, -4.18, 4.21, 1.79, 1.76, 0.42, -0.42, -4.11, -0.82, 3.05, 4.76, 4.83, 1.55, -0.21, 0.45, 2.18, 2.29, 3.94, 4.35, 0.72, 4.33, 0.48, 4.31, 1.05, 0.33, -1.66, 0.35, -1.0, 1.64, 3.74, -0.24, -3.31, 3.81, 0.3, -4.24, 2.22, 3.89, -3.81, -0.42, 4.47, 3.41, 3.05, -4.94, -1.5, 0.41, -2.88, -3.12, 3.74, -0.89, -4.27, 1.55, 4.16, -1.22, 2.12, 1.09, 4.31, -2.21, 2.12, 2.37, 4.84, 1.54, 1.12, 0.8, 2.67, 2.77],
        h::Vector{Float64} = [-3.65, 4.42, -2.61, 3.67, -1.98, 3.45, -4.34, -1.45, -2.64, -1.65, 1.37],
    )
        odp = conv(x,h)
        return rms(odp)
    end

    out1 = rozwiazanie()
end

begin
    function rozwiazanie(;
        m::Vector{Float64} = [0.8, 0.802, 0.804, 0.806, 0.808, 0.81, 0.812, 0.814, 0.816, 0.818, 0.82, 0.822, 0.824, 0.826, 0.828, 0.83, 0.832, 0.834, 0.836, 0.838, 0.84, 0.842, 0.844, 0.846, 0.848, 0.85, 0.852, 0.854, 0.856, 0.858, 0.86, 0.862, 0.864, 0.866, 0.868, 0.87, 0.872, 0.874, 0.876, 0.878, 0.88, 0.882, 0.884, 0.886, 0.888, 0.89, 0.892, 0.894, 0.896, 0.898, 0.9, 0.902, 0.904, 0.906, 0.908, 0.91, 0.912],
        s::Vector{Float64} = [0.0065, 0.0602, 0.4882, 0.6802, 0.26, 0.9415, 0.9107, 0.9199, 0.4369, 0.5635, 0.5404, 0.2132, 0.1394, 0.5098, 0.4928, 0.7469, 0.6749, 0.2449, 0.0963, 0.6899, 0.0778, 0.3784, 0.2766, 0.3803, 0.3337, 0.1482, 0.5117, 0.7478, 0.5698, 0.5931, 0.4825, 0.1593, 0.4348, 0.8704, 0.3992, 0.6893, 0.2917, 0.0384, 0.7438, 0.1079, 0.1905, 0.0799, 0.989, 0.8093, 0.1951, 0.6026, 0.3108, 0.3209, 0.8728, 0.2652, 0.2846, 0.3638, 0.7327, 0.237, 0.2222, 0.293, 0.1052],
        t::Vector{Float64} = [0.8462, 0.8832, 0.9054, 0.8644, 0.8058, 0.9076, 0.8502, 0.8218, 0.8286, 0.8778, 0.8836, 0.8008],
    )
        odp = interpolate(m,s)
        y = odp.(t)
        return sum(y)
    end

    out2 = rozwiazanie()
end

begin
    function rozwiazanie(;
        a::Float64 = -4.3,
        b::Float64 = 1.2,
        x::Vector{Float64} = [1.18, 1.12393, 1.06785, 1.01178, 0.9557, 0.89963, 0.84355, 0.78748, 0.7314, 0.67533, 0.61925, 0.56318, 0.5071, 0.45103, 0.39495, 0.33888, 0.2828, 0.22673, 0.17065, 0.11458, 0.0585, 0.00243, -0.05364, -0.10972, -0.16579, -0.22187, -0.27794, -0.33402, -0.39009, -0.44617, -0.50224, -0.55832, -0.61439, -0.67047, -0.72654, -0.78262, -0.83869, -0.89477, -0.95084, -1.00692, -1.06299, -1.11907, -1.17514, -1.23121, -1.28729, -1.34336, -1.39944, -1.45551, -1.51159, -1.56766, -1.62374, -1.67981, -1.73589, -1.79196, -1.84804, -1.90411, -1.96019, -2.01626, -2.07234, -2.12841, -2.18449, -2.24056, -2.29664, -2.35271, -2.40879, -2.46486, -2.52093, -2.57701, -2.63308, -2.68916, -2.74523, -2.80131, -2.85738, -2.91346, -2.96953, -3.02561, -3.08168, -3.13776, -3.19383, -3.24991, -3.30598, -3.36206, -3.41813, -3.47421, -3.53028, -3.58636, -3.64243, -3.6985, -3.75458, -3.81065, -3.86673, -3.9228, -3.97888, -4.03495, -4.09103, -4.1471, -4.20318, -4.25925, -4.31533],
    )
        N = 5
        L = range(;start=a, stop=b, length=2^N)
        y = quantize(L)
        wyniki = x - y.(x)
        return rms(wyniki)
    end

    out3 = rozwiazanie()
end


begin
    function rozwiazanie(;
        zz::Vector{ComplexF64} = ComplexF64[0.8806147029934522 - 0.47383303480419564im, 0.47895496447920777 + 0.8778394739362777im, 0.8806147029934522 + 0.47383303480419564im, 0.47895496447920777 - 0.8778394739362777im, 0.8532546423247563 - 0.5214945017459457im, 0.559514614152668 + 0.8288204851170071im, 0.8532546423247563 + 0.5214945017459457im, 0.559514614152668 - 0.8288204851170071im, 0.788756430246697 - 0.6147058595332305im, 0.6815453317909527 + 0.731775895144108im, 0.788756430246697 + 0.6147058595332305im, 0.6815453317909527 - 0.731775895144108im],
        pp::Vector{ComplexF64} = ComplexF64[0.2924417811715424 + 0.8543073495070267im, 0.8786097759353411 - 0.38155219804479446im, 0.2924417811715424 - 0.8543073495070267im, 0.8786097759353411 + 0.38155219804479446im, 0.3395500900839098 + 0.6666130351314604im, 0.7817612108041739 - 0.37536662856549646im, 0.3395500900839098 - 0.6666130351314604im, 0.7817612108041739 + 0.37536662856549646im, 0.46765084891495945 + 0.4991924553119148im, 0.6423170785765313 - 0.40056387424808315im, 0.46765084891495945 - 0.4991924553119148im, 0.6423170785765313 + 0.40056387424808315im],
        k::Float64 = 0.2905571436267431,
        F::Vector{Float64} = [0.01, 0.02, 0.03, 0.17, 0.23, 0.36],
    )
        a = poly_from_roots(pp)
        b = poly_from_roots(zz) .* k
        wyniki = [lti_amp(b, a, freq) for freq in F]
        return mean(wyniki)
    end

    out4 = rozwiazanie()
end

firwin_bp(order, F1, F2) = [2F2 * sinc(2F2*n) - 2F1 * sinc(2F1 * n) for n in -order/2:order/2]
blackman(M) = [0.42 + 0.5cos(2*n/(2M+1))+0.08cos(4π*n/(2M+1)) for n in -M:M]
haming(M) = [0.54 + 0.46cos(2π*n/(2M+1)) for n in -M:M]
firwin_lp(order, F0) = [2F0 * sinc(2F0 * n) for n in -order/2:order/2]


begin
function rozwiazanie(;
    order::Int = 98,
    fp::Float64 = 161.0,
    f1::Float64 = 45.08,
    f2::Float64 = 54.74,
    z::Vector{Int} = [2, 25, 5, 10, 59, 9],
)
    h = firwin_bp(order, f1/fp, f2/fp)
    y = blackman(Int(order/2))
    h = h .* y
    wyniki = [h[i] for i in z]
    return sum(wyniki)
end
out5 = rozwiazanie()
end

begin
    function rozwiazanie(;
        order::Int = 72,
        fp::Float64 = 110.0,
        f0::Float64 = 14.3,
        z::Vector{Int} = [20, 43, 63, 22, 14],
    )
        h = firwin_lp(order, f0/fp)
        y = haming(Int(order/2))
        h = h .* y
        wyniki = [h[i] for i in z]
        return sum(wyniki)
    end

    out6 = rozwiazanie()
end
begin
function rozwiazanie(;
    x::Vector{Float64} = [-2.36, 4.35, -0.34, 0.88, 4.22, 4.9, -4.69, -2.05, 2.28, 1.62, -0.57, -1.88, -2.5, -3.84, 1.61, -1.0, 2.31, -2.5, -1.15, 4.07, 3.02, 4.43, -3.58, -4.35, 4.91, 2.73, -2.2, 3.49, 4.15, 3.55, -0.71, -4.35, 2.09, 4.82, 1.15, 3.71, 1.24, -4.48, 0.33, -1.87, 3.42, -1.46, 4.81, -4.71, -3.95, -2.79, 2.31, 0.12, 4.82, 0.13, -1.83, -3.67, 0.13, -0.16, -0.88, 0.2, -3.5, -0.64, 2.76, -2.8, 1.06, -1.73, 2.18, 1.38, 2.96, -1.31, 1.74, 1.08, 3.41, 3.37, -4.55, -1.03, 2.05],
    h::Vector{Float64} = [1.5, -0.21, -2.44, -3.95, 1.47, 2.89, -2.69, -1.21, -4.13, -0.45, -2.02, 1.79, 2.55, 3.19, 0.22],
)
    odp = conv(x,h)
    return mean(odp)


end
out7 = rozwiazanie()
end