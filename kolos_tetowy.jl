using LinearAlgebra


quantize(L) = x -> L[argmin(abs.(-L .+ x))]

energy(x) = sum(abs2, x)
power(x) = energy(x)/length(x)
mean(x) = sum(x)/length(x)

triangular_wave(t) = ifelse(mod(t+1/4,1.0) < 1/2, 4mod(t+1/4,1.0)-1, -4mod(t+1/4,1.0)+3)
sawtooth_wave(t::Real)::Real = -2 * rem(t, 1, RoundNearest)

function lti_filter(b,a,x)
    M = length(b)-1
    K = length(a)-1
    N = length(x)
    suma = zeros(Float64, N)

    for n in 1:N
        for m in 0:M
            if n-m > 0
                suma[n] += b[m+1] * x[n-m]
            end
        end
        for k in 1:K
            if n-k > 0
                suma[n] -= a[k+1] * suma[n-k]
            end
        end
    end
    return suma

end


function conv(x, y)
    M = length(x)
    K = length(y)
    suma = zeros(eltype(x), M+K-1)
    for m in 1:M
        for k in 1:K
            suma[k+m-1] += x[m] * y[k]
        end
    end
    return suma
end

function poly_from_roots(x)
    p = [1.0 + 0im]
    for i in eachindex(x)
        p = conv(p, [1, -x[i]])
    end
    return p
end

function lti_amp(f, b,a)
    M = length(b)-1
    K = length(a)-1
    num = sum(b[m+1] * cispi(-2 * m * f) for m in 0:M)
    denom = sum(a[k+1] * cispi(-2 * k * f) for k in 0:K)
    Hf = num/denom
    return abs(Hf)
end

function lti_phase(f, b,a)
    M = length(b)-1
    K = length(a)-1
    num = sum(b[m+1] * cispi(-2 * m * f) for m in 0:M)
    denom = sum(a[k+1] * cispi(-2 * k * f) for k in 0:K)
    Hf = num/denom
    return angle(Hf)
end


function interpolate(m, s, kernel::Function=sinc)
    return x -> begin
        suma = 0.0
        delta = m[2]-m[1]

        for i in eachindex(m)
            suma += s[i] * kernel((x - m[i])/delta)
        end
        return suma
    end

end

function dft(x)
    N = length(x)
    delta = [cispi(-2*n/N) for n in 0:N-1]
    [
        sum((
            x[i+1] * delta[(i*k)%N+1] for i in 0:N-1
        )) for k in 0:N-1
    ]
    
end

function freq_to_index(f, N, fp)
    matrix = N*f / fp
    return Int(round(mod(matrix, N)))+1
end

firwin_lp(order, F0) = [2F0 * sinc(2F0 * i) for i in -order/2:order/2]
triang(M::Integer)::AbstractVector{<:Real} = [1 - abs(n) / (M + 1) for n = -M:M]


function roots(x)
    H = Matrix(I, length(x)-2, length(x)-2)
    Z = zeros(length(x)-2)
    H = vcat(Z', H)
    H = hcat(H, -1* reverse(x[2:end]))
    return eigvals(H)
end

begin
    function rozwiazanie(;
        a::Float64 = -1.4,
        b::Float64 = 5.9,
        x::Vector{Float64} = [5.63, 5.50458, 5.37915, 5.25373, 5.12831, 5.00288, 4.87746, 4.75203, 4.62661, 4.50119, 4.37576, 4.25034, 4.12492, 3.99949, 3.87407, 3.74864, 3.62322, 3.4978, 3.37237, 3.24695, 3.12153, 2.9961, 2.87068, 2.74525, 2.61983, 2.49441, 2.36898, 2.24356, 2.11814, 1.99271, 1.86729, 1.74186, 1.61644, 1.49102, 1.36559, 1.24017, 1.11475, 0.98932, 0.8639, 0.73847, 0.61305, 0.48763, 0.3622, 0.23678, 0.11136, -0.01407, -0.13949, -0.26492, -0.39034, -0.51576, -0.64119, -0.76661, -0.89203, -1.01746, -1.14288, -1.26831, -1.39373, 5.88085, 5.75542, 5.63, 5.50458, 5.37915, 5.25373, 5.12831, 5.00288, 4.87746, 4.75203, 4.62661, 4.50119, 4.37576, 4.25034, 4.12492, 3.99949],
    )
        N = 5
    L = range(;start=a,stop=b,length=2^N)
    y = quantize(L)
    y = y.(x)
        matrix = x .- y
        return power(matrix)
        
    end
    out1 = rozwiazanie()
end


begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.0010578382275482701, 0.0, -0.0042313529101930805, 0.0, 0.00634702936528962, 0.0, -0.0042313529101930805, 0.0, 0.0010578382275482701],
        a::Vector{Float64} = [1.0, -7.245357858741227, 23.23861078921187, -43.14408075767869, 50.751870248135404, -38.75118756097174, 18.756503293218636, -5.2606808293764304, 0.654322676212475],
    )
        p = roots(a)
        p = abs.(p)
        if (all(p .< 1))
            return 1.0
        elseif (all(p .<= 1.0) && any( p .== 1.0))
            return 0.0
        else
            return -1.0
        end 
    end

    out2 = rozwiazanie()
end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.5065250448720076, -3.886435162693809, 15.463986930598862, -40.61718601421616, 77.61560770732304, -112.81256195754547, 127.5314074689022, -112.81256195754544, 77.615607707323, -40.61718601421613, 15.463986930598852, -3.8864351626938043, 0.5065250448720066],
        a::Vector{Float64} = [1.0, -8.85866535497064, 40.04069157122252, -116.86529680912854, 243.68615505098475, -380.8882749244024, 457.83198498678064, -426.94480003680894, 307.7096305842007, -167.93415965133505, 66.46483978547978, -17.32428987097204, 2.33153360576289],
    )
    
        p = roots(a)
        p = abs.(p)
        if (all(p .< 1))
            return 1.0
        elseif (all(p .<= 1.0) && any( p .== 1.0))
            return 0.0
        else
            return -1.0
        end 
    end

    out2 = rozwiazanie()
end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.004564867771226063, -0.012283441363370368, 0.007807169510860869, 0.007807169510860869, -0.012283441363370368, 0.004564867771226064],
        a::Vector{Float64} = [1.0, -4.415379077314696, 7.829167421698942, -6.965909702266977, 3.1089863014784473, -0.5566877517582844],
        x::Vector{Float64} = [-0.09, -0.07, 0.78, 0.88, 0.59, -0.57, -0.06, 0.57, -0.33, 0.6, -0.17, -0.81, -0.82, -0.91, -0.12, -0.02, 0.66, 0.69, 0.83, -0.61, 0.51, 0.59, -0.84, -0.17, -0.39, -0.9, -0.37, -0.54, -0.13, -0.96, 0.07, -0.97, -0.08, 0.52, -0.62, -0.98, 0.04, 0.38, 0.31, -0.3, -0.21, -0.95, -0.44, 0.64],
        L::Int = 65,
    )
        N = length(x)
        H = vcat(x, zeros(Float64, L-N))
        matrix = lti_filter(b,a,H)
        return mean(matrix)
    end
    out3 = rozwiazanie()
end

begin
    function rozwiazanie(;
        fp::Int = 980,
        x::Vector{ComplexF64} = ComplexF64[0.13 - 0.9im, -0.46 - 0.14im, 1.0 - 0.15im, 0.54 + 1.04im, -0.3 + 0.01im, 0.13 + 0.37im, -0.26 - 0.52im, 0.2 + 0.78im, -0.36 + 0.36im, 0.43 - 0.45im, -0.13 - 1.13im, -1.41 + 0.55im, 0.28 + 1.5im, -1.02 + 0.46im, -0.81 - 0.82im, 0.03 - 0.79im, 0.64 + 0.02im, 0.6 - 0.69im, 0.37 - 0.84im, -0.13 + 0.23im, 0.12 + 0.46im, -0.03 + 0.25im, -1.76 - 0.44im, 1.27 + 0.42im, 1.19 + 1.01im, -1.17 + 0.8im, -1.35 + 0.41im, -1.04 + 0.83im, 0.12 + 0.2im, 0.91 - 0.21im, 0.71 - 1.22im, 0.4 + 1.05im, 0.81 - 0.03im, 0.52 - 1.23im, -0.02 + 1.36im],
        f::Vector{Int} = [-476, -448, -336, -280, -84, -28, 168],
    )
    X = dft(x)
    phases = [angle(X[freq_to_index(freq, length(x), fp)]) for freq in f]
      
        return sum(phases)
    end

    out4 = rozwiazanie()
end

begin
    function rozwiazanie(;
        order::Int = 36,
        fp::Float64 = 156.0,
        f0::Float64 = 46.8,
        z::Vector{Int} = [4, 30, 27, 6, 24, 10],
    )
        h = firwin_lp(order, f0/fp)
        h = h .* triang(Int(order/2))
        h_z = [h[i] for i in z]
        return sum(h_z)
    end

    out5 = rozwiazanie()
end

begin
    function rozwiazanie(;
        m::Vector{Float64} = [0.9, 0.9011, 0.9022, 0.9033, 0.9044, 0.9055, 0.9066, 0.9077, 0.9088, 0.9099, 0.911, 0.9121, 0.9132, 0.9143, 0.9154, 0.9165, 0.9176, 0.9187, 0.9198, 0.9209, 0.922, 0.9231, 0.9242, 0.9253, 0.9264, 0.9275, 0.9286, 0.9297, 0.9308, 0.9319, 0.933, 0.9341, 0.9352, 0.9363, 0.9374, 0.9385, 0.9396, 0.9407, 0.9418, 0.9429, 0.944, 0.9451, 0.9462, 0.9473, 0.9484, 0.9495, 0.9506, 0.9517, 0.9528, 0.9539, 0.955, 0.9561, 0.9572, 0.9583, 0.9594, 0.9605, 0.9616, 0.9627, 0.9638, 0.9649, 0.966, 0.9671, 0.9682, 0.9693, 0.9704, 0.9715, 0.9726, 0.9737, 0.9748, 0.9759, 0.977, 0.9781, 0.9792, 0.9803, 0.9814, 0.9825, 0.9836, 0.9847, 0.9858, 0.9869, 0.988, 0.9891, 0.9902, 0.9913, 0.9924, 0.9935, 0.9946, 0.9957, 0.9968, 0.9979, 0.999, 1.0001],
        s::Vector{Float64} = [0.9206, 0.8852, 0.6115, 0.4504, 0.5594, 0.6549, 0.8424, 0.9905, 0.882, 0.6641, 0.3376, 0.5168, 0.271, 0.1464, 0.8294, 0.0853, 0.3396, 0.0938, 0.3872, 0.6981, 0.1339, 0.9336, 0.1589, 0.682, 0.9382, 0.7047, 0.5657, 0.1382, 0.2942, 0.1266, 0.4117, 0.6851, 0.3316, 0.3042, 0.0218, 0.062, 0.9671, 0.8035, 0.5482, 0.1185, 0.0393, 0.2205, 0.5976, 0.7297, 0.717, 0.4472, 0.7635, 0.1456, 0.678, 0.9697, 0.1728, 0.4737, 0.4205, 0.4188, 0.2561, 0.2609, 0.5573, 0.1525, 0.9376, 0.1315, 0.7338, 0.6132, 0.5036, 0.5811, 0.4713, 0.3815, 0.5398, 0.6298, 0.7387, 0.4864, 0.5024, 0.7032, 0.8353, 0.0197, 0.3536, 0.896, 0.7677, 0.2507, 0.799, 0.7555, 0.9634, 0.5535, 0.1119, 0.722, 0.4653, 0.6271, 0.9161, 0.9405, 0.1736, 0.9709, 0.8664, 0.0759],
        t::Vector{Float64} = [0.91914, 0.92772, 0.92244],
    )
        g = interpolate(m, s)
        return sum(g.(t))
    end

    out6 = rozwiazanie()
end

begin
    function rozwiazanie(;
        fp::Float64 = 492.21,
        t1::Float64 = -4.61,
        N::Int = 82,
    )
    x = range(;start=t1, step=1/fp, length=N)
     y = 0.8 * sawtooth_wave.(0.3.*x .- 2.2)
     return energy(y)
    end

    out7 = rozwiazanie()

end

begin
    function rozwiazanie(;
        a::Float64 = -5.3,
        b::Float64 = 2.2,
        x::Vector{Float64} = [-3.78, -3.36242, -2.94484, -2.52725, -2.10967, -1.69209, -1.27451, -0.85692, -0.43934, -0.02176, 0.39582, 0.81341, 1.23099, 1.64857, 2.06615, -5.11626, -4.69868, -4.2811, -3.86352, -3.44593, -3.02835, -2.61077, -2.19319, -1.7756, -1.35802, -0.94044, -0.52286, -0.10527, 0.31231, 0.72989, 1.14747, 1.56505, 1.98264, -5.19978, -4.7822, -4.36462, -3.94703, -3.52945, -3.11187, -2.69429, -2.2767, -1.85912, -1.44154, -1.02396, -0.60637, -0.18879, 0.22879, 0.64637, 1.06396, 1.48154, 1.89912, -5.2833, -4.86571, -4.44813, -4.03055, -3.61297, -3.19538, -2.7778, -2.36022, -1.94264, -1.52505, -1.10747, -0.68989, -0.27231, 0.14527, 0.56286, 0.98044, 1.39802, 1.8156, 2.23319, -4.94923, -4.53165, -4.11407, -3.69648, -3.2789, -2.86132, -2.44374, -2.02615, -1.60857, -1.19099, -0.77341, -0.35582, 0.06176, 0.47934, 0.89692, 1.31451, 1.73209, 2.14967, -5.03275, -4.61516, -4.19758, -3.78, -3.36242, -2.94484, -2.52725],
    )
        L = range(;start=a, stop=b, length=2^5)
        y = quantize(L)
        x_quantized = y.(x)
        error = x .- x_quantized
        return energy(error)
    end

    out8 = rozwiazanie()

end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.001705894081297692, 0.010235364487786152, 0.025588411219465382, 0.03411788162595384, 0.025588411219465382, 0.010235364487786152, 0.001705894081297692],
        a::Vector{Float64} = [1.0, -3.1656682526007938, 5.467893899969901, -5.951356900331538, 4.261321965780063, -1.8997736909125367, 0.42502895625649917],
        F::Vector{Float64} = [0.04, 0.05, 0.29],
    )
        y = [lti_amp(freq, b,a ) for freq in F]
        return mean(y)
    end
out9 = rozwiazanie()
end

begin
    function rozwiazanie(;
        zz::Vector{ComplexF64} = ComplexF64[0.9012071040674259 + 0.4333886887984085im, 0.9012071040674259 - 0.4333886887984085im, 0.9012071040674259 + 0.4333886887984085im, 0.9012071040674259 - 0.4333886887984085im, 0.9012071040674259 + 0.4333886887984085im, 0.9012071040674259 - 0.4333886887984085im, 0.9012071040674259 + 0.4333886887984085im, 0.9012071040674259 - 0.4333886887984085im],
        pp::Vector{ComplexF64} = ComplexF64[0.6695630125458115 - 0.5756115051413077im, 0.9157692593030107 + 0.2535663319313536im, 0.6695630125458115 + 0.5756115051413077im, 0.9157692593030107 - 0.2535663319313536im, 0.6669222806677658 - 0.36697051310786466im, 0.7999907601188845 + 0.25666523910379im, 0.6669222806677658 + 0.36697051310786466im, 0.7999907601188845 - 0.25666523910379im],
        k::Float64 = 0.5365885311136991,
        F::Vector{Float64} = [0.11, 0.34, 0.49],
    )
    a = poly_from_roots(pp)
    b = poly_from_roots(zz) .* k
    fi = [lti_phase(freq, b, a) for freq in F]
    return mean(fi)
    end

    out10 = rozwiazanie()

end

begin
    function rozwiazanie(;
        m::Vector{Float64} = [4.1, 4.1086, 4.1172, 4.1258, 4.1344, 4.143, 4.1516, 4.1602, 4.1688, 4.1774, 4.186, 4.1946, 4.2032, 4.2118, 4.2204, 4.229, 4.2376, 4.2462, 4.2548, 4.2634, 4.272, 4.2806, 4.2892, 4.2978, 4.3064, 4.315, 4.3236, 4.3322, 4.3408, 4.3494, 4.358, 4.3666, 4.3752, 4.3838, 4.3924, 4.401, 4.4096, 4.4182, 4.4268, 4.4354, 4.444, 4.4526, 4.4612, 4.4698, 4.4784, 4.487, 4.4956, 4.5042, 4.5128, 4.5214, 4.53, 4.5386, 4.5472, 4.5558, 4.5644, 4.573, 4.5816, 4.5902, 4.5988, 4.6074, 4.616, 4.6246, 4.6332, 4.6418, 4.6504, 4.659, 4.6676, 4.6762, 4.6848, 4.6934, 4.702, 4.7106, 4.7192, 4.7278],
        s::Vector{Float64} = [0.1322, 0.3326, 0.7502, 0.926, 0.6285, 0.6091, 0.0917, 0.0895, 0.2076, 0.183, 0.0371, 0.0885, 0.7563, 0.275, 0.5199, 0.4349, 0.7092, 0.1821, 0.0641, 0.4713, 0.2168, 0.016, 0.1541, 0.6131, 0.8111, 0.5748, 0.0911, 0.2801, 0.0572, 0.5657, 0.6217, 0.2616, 0.4741, 0.549, 0.89, 0.4698, 0.463, 0.5975, 0.8055, 0.6104, 0.9473, 0.3569, 0.2749, 0.2989, 0.3583, 0.2398, 0.8009, 0.67, 0.869, 0.8754, 0.0533, 0.0528, 0.6517, 0.1232, 0.8412, 0.5621, 0.5116, 0.8282, 0.9473, 0.8407, 0.4221, 0.9335, 0.777, 0.7781, 0.4988, 0.3431, 0.5884, 0.1061, 0.7035, 0.9251, 0.9632, 0.8133, 0.2587, 0.5337],
        t::Vector{Float64} = [4.47926, 4.3322, 4.401, 4.44314, 4.4483, 4.57042, 4.16192],
    )
        y = interpolate(m,s)
        return sum(y.(t))
    end

    out11 = rozwiazanie()
end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.5448385044754511, -2.1363691591466765, 3.1835495115735233, -2.1363691591466756, 0.5448385044754509],
        a::Vector{Float64} = [1.0, -2.9095379347133496, 3.3986850271514526, -1.8604170832176479, 0.4200902138868018],
    )
        p = roots(a)
        p = abs.(p)
        if (all(p .< 1))
            return 1.0
        elseif (all(p .<= 1.0) && any( p .== 1.0))
            return 0.0
        else
            return -1.0
        end 
    end

    out12 = rozwiazanie()
end