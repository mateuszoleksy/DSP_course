using LinearAlgebra

energy(x) = sum(abs2, x)
power(x) = energy(x)/length(x)

function conv(f,g)
    M = length(f)
    K = length(g)
    sum = zeros(eltype(f), M+K-1)
    for m in 1:M
        for k in 1:K
            sum[m+k-1] += f[m] * g[k]
        end
    end
    return sum
end

function poly_from_roots(r)
    p = [1.0 + 0im]
    for i in eachindex(r)
        p = conv(p, [1, -r[i]])
    end
    return p
end

function lti_phase(b,a,f)
    M = length(b)
    K = length(a)
    num = sum(b[m+1] * cispi(-2*m*f) for m in 0:M-1)
    denom = sum(a[k+1] * cispi(-2*k*f) for k in 0:K-1)
    hf = num/denom
    return angle(hf)
end

mean(x) = sum(x)/ length(x)

begin
    function rozwiazanie(;
        zz::Vector{ComplexF64} = ComplexF64[0.9991937006315201 + 0.04014907991832163im, 0.9991937006315201 - 0.04014907991832163im, 0.9991937006315201 + 0.04014907991832163im, 0.9991937006315201 - 0.04014907991832163im, 0.9991937006315201 + 0.04014907991832163im, 0.9991937006315201 - 0.04014907991832163im, 0.9991937006315201 + 0.04014907991832163im, 0.9991937006315201 - 0.04014907991832163im],
        pp::Vector{ComplexF64} = ComplexF64[0.7416249905966966 - 0.3765914676416538im, 0.9988047026129682 + 0.0029092660931962556im, 0.7416249905966966 + 0.3765914676416538im, 0.9988047026129682 - 0.0029092660931962556im, 0.6101495788698361 - 0.12819299411109605im, 0.9970758117958182 + 0.0012243613321473272im, 0.6101495788698361 + 0.12819299411109605im, 0.9970758117958182 - 0.0012243613321473272im],
        k::Float64 = 0.5164431539463827,
        F::Vector{Float64} = [0.02, 0.06, 0.14, 0.31, 0.37],
    )
        b = poly_from_roots(zz) .* k
        a = poly_from_roots(pp)
        wyniki = [lti_phase(b,a,freq) for freq in F]
        return mean(wyniki)
    end

    out1 = rozwiazanie()
end

function lti_filter(b,a,x)
    M = length(b)
    K = length(a)
    N = length(x)
    sum = zeros(N)
    for n in 1:N
        for m in 0:M-1
            if n-m > 0
                sum[n] += b[m+1] * x[n-m]
            end
        end
        for k in 1:K-1
            if n-k > 0
                sum[n] -= a[k+1] * sum[n-k]
            end
        end
    end
    return sum
end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.008248301326312107, 0.03299320530524843, 0.04948980795787264, 0.03299320530524843, 0.008248301326312107],
        a::Vector{Float64} = [1.0, -2.3860700636910175, 2.858702634837433, -1.8259167215181686, 0.5397007152161932],
        x::Vector{Float64} = [-0.54, -0.68, -0.22, -0.42, 0.66, -0.43, -0.87, -0.16, 0.73, -0.7, 0.7, -0.98, 0.2, -0.37, 0.03, 0.06, -0.7, 0.35, -0.13, 0.35, -0.52, 0.65, 0.14, 0.0, 0.17, -0.23, -0.02, 0.89, 0.33, -0.87, -0.5, 0.38, -0.55, -0.95, -0.87, 0.62, -0.34, -0.55, -0.26, -0.91, -0.82, -0.53, 0.94],
        L::Int = 59,
    )
        N = length(x)
        x_padded = vcat(x, zeros(Float64, L-N))
        wyniki = lti_filter(b,a,x_padded)
        return mean(wyniki)
    end

    out2 = rozwiazanie()
end

quantize(L) = x -> L[argmin(abs.(-L .+ x))]

begin
    function rozwiazanie(;
        a::Float64 = -4.1,
        b::Float64 = 1.6,
        x::Vector{Float64} = [-3.40052, -3.12813, -2.82598, -2.54372, -2.28593, -2.02409, -1.74303, -1.45929, -1.19127, -0.93045, -0.65669, -0.37156, -0.09659, 0.16204, 0.42693, 0.71577, 1.00731, 1.25931, 1.44027, -3.56832, -3.36387, -3.0645, -2.76552, -2.49734, -2.24223, -1.97127, -1.68549, -1.40806, -1.14605, -0.88101, -0.60003, -0.31714, -0.05085, 0.20753, 0.48324, 0.77685, 1.05377, 1.28553, 1.46264, -3.5897, -3.30937, -2.99784, -2.7117, -2.45468, -2.19503, -1.91469, -1.62981, -1.3606, -1.10013, -0.8277, -0.543, -0.26678, -0.00676, 0.25741, 0.54329, 0.83298, 1.09139, 1.31555, 1.51919, -3.56295, -3.24218, -2.93453, -2.665, -2.41206, -2.14291, -1.85678, -1.57786, -1.31533, -1.05132, -0.77144, -0.48811, -0.22026, 0.03861, 0.31246, 0.60345, 0.88143, 1.1247, 1.35996, 1.60427, -3.5044, -3.17057, -2.87888, -2.62303, -2.36603, -2.0865, -1.80038, -1.52992, -1.26978, -0.99866, -0.7144, -0.43702, -0.17574, 0.0878, 0.37127, 0.65978, 0.92248, 1.16084, 1.42718, -4.05272, -3.42739],
    )
        N = 3
        L = range(;start=a, stop=b, length=2^N)
        y = quantize(L)
        x_quantized = y.(x)
        error = x .- x_quantized
        return power(error)
    end

    out3 = rozwiazanie()
end

rms(x) = sqrt(power(x))

begin
    function rozwiazanie(;
        x::Vector{Float64} = [-3.41, 1.54, 3.07, -0.67, -4.42, -1.7, -4.17, 2.63, -0.82, 1.51, 3.82, 0.27, 4.6, 4.57, 2.81, 0.22, -1.83, -0.2, -1.28, -0.44, 4.05, 0.84, 4.13, -4.4, 3.85, 1.91, -4.76, -3.4, 3.86, -4.55, 2.37, -0.03, 0.14, 3.96, -1.18, 0.41, 0.39, 3.4, -0.43, 1.58, -1.48, 4.37, 0.78, -0.37, 0.71, 1.32, 0.2, 0.39, 3.12, 3.47, -2.97, 1.97, -2.04, 4.27, 2.97, -4.34, -2.16],
        h::Vector{Float64} = [-2.03, -0.93, -4.87, 4.56, 0.13, 4.86, 4.76, 3.99, -0.94, 3.06],
    )
        wyniki = conv(x,h)
        return energy(wyniki)
    end

    out4 = rozwiazanie()
end

triangular_wave(x) = ifelse(mod(x+1/4, 1.0) < 1/2, 4*mod(x+1/4, 1.0)-1, -4*mod(x+1/4, 1.0)+3)


begin
    function rozwiazanie(;
        fp::Float64 = 294.22,
        t1::Float64 = 1.01,
        N::Int = 998,
    )
        x = range(;start=t1, step=1/fp, length=N)
        y = 3.6.*triangular_wave.(3.3 .* x  .- 2.0)
        return power(y)
    end
    out5 = rozwiazanie()
end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.7317649099938767, -4.388405334711227, 10.967739321912623, -14.622197793669896, 10.967739321912628, -4.38840533471123, 0.7317649099938777],
        a::Vector{Float64} = [1.0, -5.377632541053392, 12.069618154826292, -14.478385143856865, 9.793918376053718, -3.54299077818208, 0.5354719329329768],
        x::Vector{Float64} = [0.02, -0.63, 0.87, -0.57, -0.43, 0.24, -0.08, 0.24, -0.51, 0.12, 0.82, -0.25, 0.88, 0.61],
        L::Int = 55,
    )
        N = length(x)
        x_padded = vcat(x, zeros(Float64, L-N))
        wyniki = lti_filter(b,a,x_padded)
        return mean(wyniki)    
    end

    out6 = rozwiazanie()
end

begin
    function rozwiazanie(;
        a::Float64 = -5.0,
        b::Float64 = 0.8,
        x::Vector{Float64} = [-2.844, -2.39959, -1.95519, -1.51078, -1.06638, -0.62197, -0.17757, 0.26684, 0.71124, -5.04435, -4.59994, -4.15554, -3.71113, -3.26673, -2.82232, -2.37792, -1.93351, -1.4891, -1.0447, -0.60029, -0.15589, 0.28852, 0.73292, -5.02267, -4.57827, -4.13386, -3.68945, -3.24505, -2.80064, -2.35624, -1.91183, -1.46743, -1.02302, -0.57862, -0.13421, 0.3102, 0.7546, -5.00099, -4.55659, -4.11218, -3.66778, -3.22337, -2.77897, -2.33456, -1.89015, -1.44575, -1.00134, -0.55694, -0.11253, 0.33187, 0.77628, -4.97931, -4.53491, -4.0905, -3.6461, -3.20169, -2.75729, -2.31288, -1.86848, -1.42407, -0.97966, -0.53526, -0.09085, 0.35355, 0.79796, -4.95764, -4.51323, -4.06883, -3.62442, -3.18001, -2.73561, -2.2912, -1.8468, -1.40239],
    )
        N = 6
        L = range(;start=a, stop=b, length=2^N)
        y = quantize(L)
        x_quantized = y.(x)
        error = x .- x_quantized
        return power(error)
    end

    out6 = rozwiazanie()
end

function lti_amp(b,a,f)
    M = length(b)
    K = length(a)
    num = sum(b[m+1] * cispi(-2*m*f) for m in 0:M-1)
    denom = sum(a[k+1] * cispi(-2*k*f) for k in 0:K-1)
    hf = num/denom
    return abs(hf)
end

begin
    function rozwiazanie(;
        zz::Vector{ComplexF64} = ComplexF64[0.853532273223488 - 0.5210399778960777im, 0.6763312502857954 + 0.7365976105628178im, 0.853532273223488 + 0.5210399778960777im, 0.6763312502857954 - 0.7365976105628178im, 0.8441586551297214 - 0.5360934293288622im, 0.6941251308284286 + 0.7198543621819742im, 0.8441586551297214 + 0.5360934293288622im, 0.6941251308284286 - 0.7198543621819742im, 0.8107197088087948 - 0.5854344999647549im, 0.7452643292653479 + 0.6667691351020013im, 0.8107197088087948 + 0.5854344999647549im, 0.7452643292653479 - 0.6667691351020013im],
        pp::Vector{ComplexF64} = ComplexF64[0.6581366566112253 + 0.7489133884081814im, 0.8595477220674387 - 0.507075402063535im, 0.6581366566112253 - 0.7489133884081814im, 0.8595477220674387 + 0.507075402063535im, 0.6251895985993383 + 0.7553613112238857im, 0.8602675788870358 - 0.4849525484754372im, 0.6251895985993383 - 0.7553613112238857im, 0.8602675788870358 + 0.4849525484754372im, 0.39725178130705147 + 0.7078233610175739im, 0.8385978662815877 - 0.3546773337869306im, 0.39725178130705147 - 0.7078233610175739im, 0.8385978662815877 + 0.3546773337869306im],
        k::Float64 = 0.4527785503865763,
        F::Vector{Float64} = [0.0, 0.13, 0.16, 0.31],
    )
        b = poly_from_roots(zz) .* k
        a = poly_from_roots(pp)
        wyniki = [lti_amp(b,a,freq) for freq in F]
        return mean(wyniki)
    end

    out7 = rozwiazanie()
end

function interpolate(m,s, kernel::Function=sinc)
    return x -> begin
        sum = 0.0
        delta = m[2] - m[1]
        for i in eachindex(m)
            sum += s[i] * kernel((x - m[i]) / delta)
        end
        return sum
    end
end

begin
    function rozwiazanie(;
        m::Vector{Float64} = [-0.6, -0.5934, -0.5868, -0.5802, -0.5736, -0.567, -0.5604, -0.5538, -0.5472, -0.5406, -0.534, -0.5274, -0.5208, -0.5142, -0.5076, -0.501, -0.4944, -0.4878, -0.4812, -0.4746, -0.468, -0.4614, -0.4548, -0.4482, -0.4416, -0.435, -0.4284, -0.4218, -0.4152, -0.4086, -0.402, -0.3954, -0.3888, -0.3822, -0.3756, -0.369, -0.3624, -0.3558, -0.3492, -0.3426, -0.336, -0.3294, -0.3228, -0.3162, -0.3096, -0.303, -0.2964, -0.2898, -0.2832, -0.2766, -0.27, -0.2634, -0.2568, -0.2502, -0.2436, -0.237, -0.2304, -0.2238, -0.2172, -0.2106, -0.204, -0.1974, -0.1908],
        s::Vector{Float64} = [0.808, 0.2499, 0.7744, 0.8246, 0.9601, 0.0797, 0.5406, 0.3808, 0.6838, 0.3388, 0.5352, 0.627, 0.0778, 0.5566, 0.0615, 0.5128, 0.6852, 0.2404, 0.8915, 0.5162, 0.4367, 0.6181, 0.2683, 0.8627, 0.614, 0.7551, 0.1687, 0.1023, 0.6184, 0.8716, 0.8626, 0.857, 0.1957, 0.124, 0.3906, 0.1246, 0.2623, 0.6034, 0.6006, 0.761, 0.2485, 0.847, 0.4214, 0.1393, 0.1856, 0.9201, 0.9325, 0.2033, 0.6539, 0.0131, 0.9928, 0.4395, 0.5721, 0.9433, 0.2405, 0.8241, 0.9887, 0.276, 0.9212, 0.9852, 0.2014, 0.9169, 0.376],
        t::Vector{Float64} = [-0.19344, -0.52608, -0.53532, -0.22842, -0.49704, -0.55974, -0.20334, -0.36174, -0.19806, -0.2667],
    )
        y = interpolate(m,s)
        wyniki = y.(t)
        return sum(wyniki)
    end

    out8 = rozwiazanie()
end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.022870207716290964, 0.09148083086516386, 0.1372212462977458, 0.09148083086516386, 0.022870207716290964],
        a::Vector{Float64} = [1.0, -1.4119835011965778, 1.1227660808212196, -0.4080709518802402, 0.06321169571625368],
        F::Vector{Float64} = [0.12, 0.13, 0.16],
    )
        wyniki = [lti_amp(b,a,freq) for freq in F]
        return mean(wyniki)
    end 
    out9 =rozwiazanie()
end

square_wave(x) = ifelse(mod(x, 1.0)<1/2, 1, -1)

begin
    function rozwiazanie(;
        fp::Float64 = 252.21,
        t1::Float64 = 7.81,
        N::Int = 996,
    )
    x = range(;start=t1, step=1/fp, length=N)
    y = 1.6.*square_wave.(3.9 .* x  .- 0.4)
        return rms(y)
    end
    

    out10 = rozwiazanie()
end

function dft(x)
    N = length(x)
    delta = [cispi(-2*n/N) for n in 0:N-1]
    [
        sum(( x[m+1]*delta[(m*k)%N+1] for m in 0:N-1

        )) for k in 0:N-1
    ]
end

function freq_to_index(f,N,fp)
    matrix = f*N/fp
    return Int(round(mod(matrix,N)))+1
end

begin
    function rozwiazanie(;
        fp::Int = 196,
        x::Vector{ComplexF64} = ComplexF64[-0.56 + 0.14im, 0.3 - 1.88im, 0.29 + 0.42im, 0.85 + 0.18im, -0.05 + 0.93im, 1.14 + 0.28im, -0.07 + 0.92im, 0.41 + 0.65im, -0.4 - 0.36im, -0.84 + 1.11im, 0.04 + 0.33im, 0.49 + 0.13im, 1.25 - 0.14im, -1.38 + 0.31im, 0.55 - 0.24im, 0.21 + 0.04im, -1.37 - 1.06im, -1.51 - 0.55im, -0.3 + 0.85im, 0.08 - 0.44im, 1.14 + 0.35im, 0.63 + 0.17im, -0.47 + 0.3im, 0.29 + 0.32im, -0.38 - 0.22im, -0.98 - 1.29im, 0.05 - 0.54im, -0.15 - 0.96im],
        f::Vector{Int} = [-70, -35, -28, -14, -7, 0, 7, 21],
    )
        X = dft(x)
        wyniki = [angle(X[freq_to_index(freq, length(x), fp)]) for freq in f]
        return sum(wyniki)
    end

    out11 = rozwiazanie()
end

begin
    function rozwiazanie(;
        x::Vector{Float64} = [3.7, -4.46, -2.41, 1.42, 4.32, 5.0, 2.69, -3.33, -0.92, -0.61, -4.65, -2.2, 3.75, 1.54, -3.52, -1.2, 1.84, -3.13, -0.69, -2.76, 3.98, 3.89, 0.64, 0.27, -3.63, 3.22, 0.17, -2.7, 4.91, 2.79, 2.7, -3.41, 4.01, 2.84, 4.42, 2.5, 1.4, 2.48, 1.27, -4.4, -4.88, 2.68, 3.54, 4.69, 4.21, -0.55, 3.57, -0.48, -3.72, -1.21, -2.04, 1.05, 1.24, 0.16, -4.24, 4.45, 2.47, -2.41, -0.92, -2.59, -2.59, -2.45, -4.02, 2.66, -2.97, -3.45, -2.0, 0.2, -3.29, 0.25],
        h::Vector{Float64} = [-2.63, -1.13, -2.1, -4.9, -4.15, 2.31, 1.29, 0.9, 3.13, 1.94, 2.57, -1.85, 2.65, 2.63, 1.7, 2.65, 4.19, -4.55, -4.32, 3.16, 1.68, 2.18],
    )
        wyniki = conv(x,h)
        return rms(wyniki)
    end

    out12 = rozwiazanie()
end

firwin_lp(order, F0) = [2F0 * sinc(2F0 * n) for n in -order/2:order/2]
hanning(M) = [0.5 + 0.5 * cos(2*pi*n / (2M+1)) for n in -M:M]

begin
    function rozwiazanie(;
        order::Int = 26,
        fp::Float64 = 144.0,
        f0::Float64 = 59.04,
        z::Vector{Int} = [24, 4, 6, 22],
    )
       h = firwin_lp(order, f0/fp)
       h = h .* hanning(Int(order/2))
       hz = [h[i] for i in z]
       return sum(hz)
    end

    out13 = rozwiazanie()
end

begin
    function rozwiazanie(;
        b::Vector{Float64} = [0.046541358543162846, -0.23270679271581424, 0.4654135854316285, -0.4654135854316285, 0.23270679271581424, -0.046541358543162846],
        a::Vector{Float64} = [1.0, 0.2289297074617319, 1.1506939843078947, 0.6053373580397509, 0.4386539929325346, 0.2657574383577356],
        F::Vector{Float64} = [0.13, 0.25, 0.3, 0.41],
    )
    wyniki = [lti_phase(b,a,freq) for freq in F]
    return mean(wyniki)
    end

    out14 = rozwiazanie()
end

begin
    function rozwiazanie(;
        zz::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
        pp::Vector{ComplexF64} = ComplexF64[0.9993517692924464 - 0.0032716313279868917im, 0.864150243775016 + 0.34377775550333195im, 0.9993517692924464 + 0.0032716313279868917im, 0.864150243775016 - 0.34377775550333195im, 0.9909107347100654 + 0.0im, 0.8669727985526672 + 0.0im],
        k::Float64 = 0.0023671989128149435,
        F::Vector{Float64} = [0.06, 0.07, 0.33, 0.45],
    )
        b = poly_from_roots(zz) .* k
        a = poly_from_roots(pp)
        wyniki = [lti_amp(b,a,freq) for freq in F]
        return mean(wyniki)
    end

    out15 = rozwiazanie()
end

begin
    function rozwiazanie(;
        a::Float64 = -2.3,
        b::Float64 = 6.0,
        x::Vector{Float64} = [3.12154, 3.41939, 3.71648, 4.01308, 4.30946, 4.60575, 4.9019, 5.19723, 5.48929, 5.78807, -1.75952, -1.53428, -1.24146, -0.93798, -0.63006, -0.31948, -0.00709, 0.30654, 0.62094, 0.93568, 1.25032, 1.56449, 1.87779, 2.18988, 2.50044, 2.80919, 3.1159, 3.42036, 3.72234, 4.0216, 4.31772, 4.60988, 4.8962, 5.17143, 5.41589, 5.46109, -1.47128, -1.4257, -1.18032, -0.90375, -0.61573, -0.32157, -0.02324, 0.27836, 0.58273, 0.88949, 1.19836, 1.50902, 1.82115, 2.13439, 2.44837, 2.76269, 3.07692, 3.39064, 3.7034, 4.01472, 4.32406, 4.63068, 4.93333, 5.22907, 5.50743, 5.67805, -1.66627, -1.45682, -1.18128, -0.8935, -0.60175, -0.30817, -0.0134, 0.28247, 0.57953, 0.87795, 1.17794, 1.47966, 1.78328, 2.08889, 2.39653, 2.7062, 3.01784, 3.33135, 3.64662, 3.96354, 4.2821, 4.60248, 4.92542, 5.25321, 5.59397, 5.9961, -2.31832, -1.64416, -1.28808, -0.96218, -0.64647, -0.33613, -0.02931],
    )
        N = 6
        L = range(;start=a, stop=b, length=2^N)
        y = quantize(L)
        x_quantized = y.(x)
        error = x .- x_quantized
        return power(error)
    end

    out16 = rozwiazanie()
end

kronecker(x) = ifelse(x == 0, 1, 0)

firwin_bp(order, F1, F2) = [(2F2*sinc(2F2*n) - 2F1*sinc(2F1 *n)) for n in -order/2:order/2]
triang(M) = [1 - abs(n) / (M + 1) for n in -M:M]

begin
    function rozwiazanie(;
        order::Int = 40,
        fp::Float64 = 192.0,
        f1::Float64 = 23.04,
        f2::Float64 = 69.12,
        z::Vector{Int} = [16, 7, 19, 9, 7, 10],
    )
        h = firwin_bp(order,f1/fp,f2/fp)
         h = h .* triang(Int(order/2))
         hz = [h[i] for i in z]
         return sum(hz)
    end

    out17 = rozwiazanie()
end

begin
    function rozwiazanie(;
        fp::Int = 1911,
        x::Vector{ComplexF64} = ComplexF64[0.09 - 0.32im, 0.02 - 1.76im, -0.34 + 0.89im, -0.29 + 1.06im, 0.68 - 1.34im, -0.88 - 0.4im, -0.51 - 0.47im, -0.64 + 0.17im, -1.27 + 0.24im, 0.13 - 0.07im, -0.41 + 1.37im, -0.99 + 0.77im, 0.08 - 0.62im, 0.8 + 0.06im, -0.96 - 0.27im, 0.54 - 0.24im, -0.85 + 0.46im, -0.95 + 0.7im, 1.07 + 1.5im, 0.96 - 0.29im, -0.31 + 0.15im, -0.5 + 0.0im, 1.63 - 0.02im, 0.06 - 0.17im, 0.74 - 1.59im, -0.15 + 0.54im, -0.25 - 0.3im, -0.91 + 1.08im, 0.51 + 0.61im, 0.05 - 0.22im, -0.62 - 0.25im, -0.02 + 0.96im, -0.25 + 0.85im, -0.11 - 0.81im, -0.47 + 1.31im, -0.84 - 1.1im, 1.18 + 1.33im, -0.09 + 0.11im, -0.05 + 0.36im],
        f::Vector{Int} = [-686, 196, 294, 833],
    )
        X = dft(x)
        wyniki = [angle(X[freq_to_index(freq, length(x), fp)]) for freq in f]

        return sum(wyniki)
    end

    out18 = rozwiazanie()
end

begin
    function rozwiazanie(;
        m::Vector{Float64} = [-0.9, -0.8979, -0.8958, -0.8937, -0.8916, -0.8895, -0.8874, -0.8853, -0.8832, -0.8811, -0.879, -0.8769, -0.8748, -0.8727, -0.8706, -0.8685, -0.8664, -0.8643, -0.8622, -0.8601, -0.858, -0.8559, -0.8538, -0.8517, -0.8496, -0.8475, -0.8454, -0.8433, -0.8412, -0.8391, -0.837, -0.8349, -0.8328, -0.8307, -0.8286, -0.8265, -0.8244, -0.8223, -0.8202, -0.8181, -0.816, -0.8139, -0.8118, -0.8097, -0.8076, -0.8055, -0.8034, -0.8013, -0.7992, -0.7971, -0.795, -0.7929, -0.7908, -0.7887, -0.7866, -0.7845, -0.7824, -0.7803, -0.7782, -0.7761, -0.774, -0.7719, -0.7698],
        s::Vector{Float64} = [0.304, 0.7079, 0.0213, 0.5916, 0.2443, 0.3573, 0.5245, 0.2787, 0.7452, 0.8853, 0.6665, 0.0801, 0.5301, 0.5575, 0.4035, 0.2644, 0.6025, 0.5111, 0.9675, 0.5539, 0.8634, 0.8199, 0.1887, 0.9821, 0.0984, 0.4899, 0.8415, 0.3492, 0.0309, 0.7348, 0.3312, 0.9006, 0.2989, 0.6418, 0.9754, 0.9355, 0.1759, 0.9727, 0.1852, 0.8096, 0.7281, 0.7235, 0.3142, 0.784, 0.3054, 0.2617, 0.1125, 0.2359, 0.6092, 0.1694, 0.6576, 0.0318, 0.1484, 0.7386, 0.1823, 0.602, 0.0955, 0.7717, 0.663, 0.3358, 0.4056, 0.6121, 0.6208],
        t::Vector{Float64} = [-0.84435, -0.87774, -0.81411, -0.79416, -0.84897, -0.78324, -0.79164, -0.80655, -0.83784, -0.77064, -0.80886, -0.87711, -0.77757, -0.81054],
    )
        y = interpolate(m,s)
        wyniki = y.(t)
        return sum(wyniki)
    end

    out19 = rozwiazanie()
end

begin
    function rozwiazanie(;
        a::Float64 = -1.3,
        b::Float64 = 1.6,
        x::Vector{Float64} = [-0.86, -0.66723, -0.47446, -0.28169, -0.08892, 0.10386, 0.29663, 0.4894, 0.68217, 0.87494, 1.06771, 1.26048, 1.45325, 1.55398, 1.3612, 1.16843, 0.97566, 0.78289, 0.59012, 0.39735, 0.20458, 0.01181, -0.18096, -0.37373, -0.56651, -0.75928, -0.95205, -1.14482, -1.33759, -1.26964, -1.07687, -0.8841, -0.69133, -0.49855, -0.30578, -0.11301, 0.07976, 0.27253, 0.4653, 0.65807, 0.85084, 1.04361, 1.23639, 1.42916, 1.57807, 1.3853, 1.19253, 0.99976, 0.80699, 0.61422, 0.42145, 0.22867, 0.0359, -0.15687, -0.34964, -0.54241, -0.73518, -0.92795, -1.12072, -1.31349, -1.29373, -1.10096, -0.90819, -0.71542, -0.52265, -0.32988, -0.13711, 0.05566, 0.24843, 0.4412, 0.63398, 0.82675],
    )
    N = 3
    L = range(;start=a, stop=b, length=2^N)
    y = quantize(L)
    x_quantized = y.(x)
    error = x .- x_quantized
    return power(error)
    end

    out20 = rozwiazanie()
end

sawtooth_wave(x) = -2*rem(x, 1.0, RoundNearest)
begin
    function rozwiazanie(;
        fp::Float64 = 335.11,
        t1::Float64 = 0.63,
        N::Int = 784,
    )
        x = range(;start = t1, step=1/fp, length=N)
        g = sawtooth_wave
        y = 4.1 .* g.(4.4 .* x .- 3.3)
        return power(y)
    end

    out21 = rozwiazanie()
end